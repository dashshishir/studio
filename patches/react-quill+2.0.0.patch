diff --git a/node_modules/react-quill/lib/index.js b/node_modules/react-quill/lib/index.js
index 27373f3..43b47b0 100644
--- a/node_modules/react-quill/lib/index.js
+++ b/node_modules/react-quill/lib/index.js
@@ -1,7 +1,7 @@
 'use strict';
 
 var React = require('react');
-var ReactDOM = require('react-dom');
+var ReactDOM = require('react-dom/client');
 var Quill = require('quill');
 var PropTypes = require('prop-types');
 
@@ -370,7 +370,12 @@
 	},
 
 	getEditor: function getEditor() {
-		return this.quill;
+        if (!this.quill) {
+            const editor = ReactDOM.createRoot(this.editorRef.current);
+            this.quill = new Quill(editor, this.getEditingArea());
+        }
+
+        return this.quill;
 	},
 
 	getEditingArea: function getEditingArea() {
@@ -378,7 +383,7 @@
 	},
 
 	getSelection: function getSelection() {
-		return this.quill.getSelection();
+		return this.getEditor().getSelection();
 	},
 
 	getBounds: function getBounds(index, length) {
diff --git a/node_modules/react-quill/lib/component.js b/node_modules/react-quill/lib/component.js
index 475853c..858dd53 100644
--- a/node_modules/react-quill/lib/component.js
+++ b/node_modules/react-quill/lib/component.js
@@ -1,6 +1,6 @@
 'use strict';
 
-var DOM = require('react-dom');
+var ReactDOM = require('react-dom/client');
 var Quill = require('quill');
 var PropTypes = require('prop-types');
 var QuillMixin = require('./mixin');
@@ -8,7 +8,7 @@
 module.exports = React.createClass({
 
 	displayName: 'Quill',
-	
+
 	mixins: [ QuillMixin ],
 
 	propTypes: {
@@ -32,7 +32,7 @@
 	},
 
 	render: function() {
-		return React.DOM.div(
+		return React.createElement('div',
 			{
 				key: this.state.generation,
 				style: this.props.style,
@@ -40,14 +40,14 @@
 				onKeyPress: this.props.onKeyPress,
 				onKeyDown: this.props.onKeyDown,
 				onKeyUp: this.props.onKeyUp
-			},
-			React.DOM.div({
+			}, React.createElement('div', {
 				key: 0,
 				ref: 'editor',
 				className: 'quill-contents',
 				dangerouslySetInnerHTML: { __html:this.state.value }
-			})
+			}, null)
 		);
-	}
+	},
 
 });
+
diff --git a/node_modules/react-quill/lib/mixin.js b/node_modules/react-quill/lib/mixin.js
index 45a4ec8..48227b2 100644
--- a/node_modules/react-quill/lib/mixin.js
+++ b/node_modules/react-quill/lib/mixin.js
@@ -1,6 +1,6 @@
 'use strict';
 
-var ReactDOM = require('react-dom');
+var ReactDOM = require('react-dom/client');
 var Quill = require('quill');
 var isEqual = require('lodash/isEqual');
 var isObject = require('lodash/isObject');
@@ -11,7 +11,7 @@
 
 	/**
 	Creates an editor on the given element. The editor will
-	be passed the configuration, have its events bound,
+	be passed the configuration, have its events bound.
 	*/
 	createEditor: function(element, config) {
 		var editor = new Quill(element, config);
@@ -19,7 +19,7 @@
 	},
 
 	hookEditor: function(editor) {
-		// Expose the editor on the component, as a ref, so that it
+		// Expose the editor on the component, as a ref, so that it can
 		// can be accessed outside the component via the ref property.
 		this.editor = editor;
 	},
@@ -117,7 +117,7 @@
 	},
 
 	getEditor: function() {
-		return this.editor;
+		return this.editor
 	},
 
 	/**
@@ -125,7 +125,7 @@
 	the DOM, ready to be used.
 	*/
 	setEditorContents: function(editor, value) {
-		var sel = this.getEditorSelection();
+		var sel = editor.getSelection();
 		if (typeof value === 'string') {
 			editor.setHTML(value);
 		} else {
@@ -169,7 +169,7 @@
 	},
 
 	getEditingArea: function(){
-		return ReactDOM.findDOMNode(this.refs.editor);
+		return this.refs.editor;
 	},
 
 	getEditorSelection: function() {
@@ -201,11 +201,6 @@
 			this.setEditorContents(this.editor, this.state.value);
 		}
 	},
-
-	componentWillReceiveProps: function(nextProps) {
-		// If the component is unmounted and mounted too quickly, componentUnmount may not be called,
-		// so we need to check if the editor is mounted.
-	},
 	
 	/**
 	We update the editor with the new props.
@@ -231,10 +226,10 @@
 		}
 
 		if (nextProps.readOnly !== this.props.readOnly) {
-			this.editor.enable(!nextProps.readOnly);
+			this.editor.enable(nextProps.readOnly);
 		}
 	},
-
+	
 	shouldComponentUpdate: function(nextProps, nextState) {
 		// The editor won't be re-rendered if the user is typing,
 		// unless the editor needs to be re-created.
