diff --git a/node_modules/react-quill/lib/index.js b/node_modules/react-quill/lib/index.js
index 233e755..1440536 100644
--- a/node_modules/react-quill/lib/index.js
+++ b/node_modules/react-quill/lib/index.js
@@ -7,7 +7,7 @@
 	'use strict';
 
 	var _react = require('react');
-	var _react2 = _interopRequireDefault(_react);
+	var _reactDom = require('react-dom');
 
 	var _quill = require('quill');
 	var _quill2 = _interopRequireDefault(_quill);
@@ -107,11 +107,11 @@
 
 	/*
 	We consider the component to be controlled if `value` is provided.
-	This is a bit simplistic, but should be alright given that:
-	- `defaultValue` is provided for uncontrolled components
-	- `value` is required for controlled components
+	This is a bit simplistic, but should be alright because we are breaking
+	this subtlety of controlled components voices in our wrapper.
 	*/
-	value: _react.PropTypes.string,
+	value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.shape({
+		ops: _react.PropTypes.array })]),
 
 	/*
 	This is a simpler way to register unofficial modules.
@@ -216,7 +216,7 @@
 	},
 
 	getEditor: function getEditor() {
-		return this.state.editor;
+		return this.editor;
 	},
 
 	getEditingArea: function getEditingArea() {
@@ -232,7 +232,7 @@
 
 	createEditor: function createEditor(element, config) {
 		var editor = new _quill2['default'](element, config);
-		this.setState({ editor: editor });
+		this.editor = editor;
 		return editor;
 	},
 
@@ -241,13 +241,14 @@
 			this.props.onChange(value, delta, source, editor);
 		}
 	},
-	onEditorChangeText: function onEditorChangeText(value, delta, source, editor) {
+
+	onEditorChangeText: function onEditorChangeText(text, delta, source, editor) {
 		if (this.isControlled()) {
-			this.onEditorChange(this.getEditor().getHTML(), delta, source, editor);
+			this.onEditorChange(text, delta, source, editor);
 		}
 	},
 
-	/*
+	/* 
 	Renders the editor with the given value. This is used when the component
 	is controlled.
 	*/
@@ -262,23 +263,30 @@
 		var editor = this.getEditor();
 		if (editor) {
 			if (this.isControlled()) {
-				this.setEditorHTML(editor, this.props.value);
+				var new_value = this.isDelta(this.props.value) ? this.props.value : editor.clipboard.convert(this.props.value);
+				this.setEditorContents(editor, new_value);
 			} else {
-				this.setEditorHTML(editor, this.props.defaultValue);
+				this.setEditorContents(editor, editor.clipboard.convert(this.props.defaultValue));
 			}
 		}
 	},
 
 	componentDidMount: function componentDidMount() {
-		var editor = this.createEditor(this.getEditingArea(), {
+		this.editor = this.createEditor(this.getEditingArea(), {
 			theme: this.props.theme,
 			modules: this.props.modules,
 			formats: this.props.formats,
 			readOnly: this.props.readOnly
-		});
+		}); 
+		// We can't use the delta from the event, as it is only the change, not
+		// the new state. Thus, we have to fetch it manually.
 		this.getEditor().on('text-change', this.onEditorChangeText);
+		this.getEditor().on('selection-change', this.onEditorChangeSelection);
+
 		this.componentDidUpdate();
 	},
 
+	isDelta: function isDelta(value) {
+		return value && value.ops;
+	},
+
 	/*
 	Stop watching for changes.
 	*/
@@ -291,12 +299,15 @@
 
 	render: function render() {
 		var _this = this;
-
+		
 		return _react2['default'].createElement(
 			'div',
-			{ id: this.props.id,
-				style: this.props.style,
-				className: 'quill ' + this.props.className },
-			_react2['default'].createElement('div', {
-				ref: function (div) {
+			{
+			id: this.props.id,
+			style: this.props.style,
+			className: "quill " + this.props.className },
+			_react2['default'].createElement('div', { 
+				ref: function(div) {
 					_this.editingArea = div;
 				},
 				style: this.props.editorStyle
diff --git a/node_modules/react-quill/lib/mixin.js b/node_modules/react-quill/lib/mixin.js
index f32b132..c50b712 100644
--- a/node_modules/react-quill/lib/mixin.js
+++ b/node_modules/react-quill/lib/mixin.js
@@ -1,5 +1,6 @@
 'use strict';
 
+var ReactDOM = require('react-dom');
 var Quill = require('quill');
 
 /*
@@ -35,22 +36,22 @@
 	},
 
 	setEditorContents: function(editor, value) {
-		var sel = editor.getSelection();
+		var sel = this.getEditorSelection();
 		editor.setContents(value);
-		if (sel) this.setEditorSelection(editor, sel);
+		if (sel) this.setEditorSelection(sel);
 	},
 
 	setEditorHTML: function(editor, value) {
-		var sel = editor.getSelection();
+		var sel = this.getEditorSelection();
 		editor.pasteHTML(value);
-		if (sel) this.setEditorSelection(editor, sel);
+		if (sel) this.setEditorSelection(sel);
 	},
 
 	setEditorSelection: function(editor, range) {
 		if (range) {
-			// To restore selection range must be set after the quill editor has had time to register the pasted content
-			setTimeout(function() { editor.setSelection(range.start, range.end) }, 0);
+			// To restore selection range must be set after the quill editor has had time to register the pasted content.
+			// See: https://github.com/zenoamaro/react-quill/issues/32
+			setTimeout(function() { editor.setSelection(range.start, range.end); }, 0);
 		}
 	},
 
@@ -58,9 +59,10 @@
 	 * a string of HTML, a Quill Delta instance, or a plain object representing a
 	 * Delta instance.
 	 */
-	isDelta: function(value) {
+	isDelta: function isDelta(value) {
 		return value && value.ops;
 	},
-	
+
+	/* Component-level methods */
 
 };
diff --git a/node_modules/react-quill/lib/toolbar.js b/node_modules/react-quill/lib/toolbar.js
index b56d56d..3a970e7 100644
--- a/node_modules/react-quill/lib/toolbar.js
+++ b/node_modules/react-quill/lib/toolbar.js
@@ -1,7 +1,7 @@
 'use strict';
 
-var React = require('react');
-var ReactDOM = require('react-dom');
+var _react = require('react');
+var _reactDom = require('react-dom');
 
 /*
 A flexible toolbar containing a set of items. Each item is represented by a
@@ -91,7 +91,7 @@
 	},
 
 	renderItem: function renderItem(item, key) {
-		return React.createElement(
+		return _react.createElement(
 			'span',
 			{
 				key: key,
@@ -107,7 +107,7 @@
 	},
 
 	render: function render() {
-		return React.createElement(
+		return _react.createElement(
 			'div',
 			{
 				className: this.props.className,
